# vim:tw=0:ts=2:sw=2:et:norl
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/pydob/easy-as-pypi#ðŸ¥§
# License: MIT
# yamllint disable rule:line-length

---

# USYNC: release-pypi.yml name â†” run-reversioning.yml on-workflow_run.
name: Publish release to PyPI

# The 'release' event sets:
# - GITHUB_SHA â€” Last commit in the tagged release
# - GITHUB_REF â€” Tag ref of release refs/tags/<tag_name>
# CXREF:
#   https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#using-event-activity-types
#   https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# There are a few types that seem like candidates for the hook:
#   'created', 'published', and 'released'.
# - Per the docs: The 'created' type does not trigger for draft releases
#   (which the author doesn't use anyway). The 'published' type triggers
#   "for pre-releases published from draft releases" (whatever that means).
#   Finally, "If you want a workflow to run when stable and pre-releases
#   publish, subscribe to published instead of released and prereleased."
#   - CXREF:
#     https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release
# - So we'll do the last thing.
#   - CXREF: More specific details on what each type means:
#     https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#release
#     - 'created':   "A draft was saved, or a release or pre-release was published
#                     without previously being saved as a draft."
#     - 'published': "A release, pre-release, or draft of a release was published."
#     - 'released':  "A release was published, or a pre-release was changed to a release."
# - Note, too, I've seen simpler syntax, e.g.,:
#     on:
#       release:
#         - created
#   but the docs use more verbose and elicited syntax.

on:
  release:
    types: [published]

  # FIXME: For now, at least while developing this workflow.
  workflow_dispatch:

env:
  # USYNC: https://github.com/actions/python-versions/releases
  # - USYNC: PYTHON_VERSION usage in .github/workflows/*.
  PYTHON_VERSION: 3.11

jobs:
  blather:
    name: Blather
    runs-on: ubuntu-latest
    steps:
      - name: Print vars and environs
        run: |
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "github.ref: ${{ github.ref }}"

      - name: Dump github context
        run: echo "${GITHUB_CONTEXT}"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

  poetry-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Probe version (not workflow_dispatch)
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> "$GITHUB_ENV"
        shell: bash
        if: github.event_name != 'workflow_dispatch'

      - name: Checkout repository (not workflow_dispatch)
        uses: actions/checkout@v3
        if: github.event_name != 'workflow_dispatch'

      - name: Checkout repository (is workflow_dispatch)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          # Fetch all history, so rev-parse HEAD is real HEAD.
          # MAYBE: This could be slow on big repos, and is only
          # necessary for a paranoid check, so could be disabled.
          fetch-depth: 0
        if: github.event_name == 'workflow_dispatch'

      - name: Probe version (is workflow_dispatch)
        run: echo "VERSION_TAG=$(git tag --points-at HEAD)" >> "$GITHUB_ENV"
        if: github.event_name == 'workflow_dispatch'

      # MEH: We could get highest version tag...
      #   ~/.kit/sh/sh-git-nubs/bin/git-nubs.sh
      #     git_latest_version_tag
      - name: Fail if VERSION_TAG undiscoverable
        run: exit 1
        if: env.VERSION_TAG == ''

      # Print release tag, mostly out of curiosity.
      # - MEH: Is there anything about the tag to verify?
      #   - The author assumes the SHA for the tag is GITHUB_SHA.
      - name: Announcement
        run: echo "Pushing $VERSION_TAG to PyPI"

      - name: Download release
        run: |
          echo "gh release download \"$VERSION_TAG\" -D dist/"
          gh release download "$VERSION_TAG" -D dist/
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Inspect work
        run: |
          echo
          echo ./
          ls -la
          echo
          echo dist/
          ls -la dist/

      # CXREF: https://python-poetry.org/docs/repositories/
      - name: Poetry build and publish package
        env:
          # 2 ways to token: Use config setting, or use their environ.
          #  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          #  poetry config pypi-token.pypi $PYPI_TOKEN
          # poetry publish --build
          poetry publish
        # FIXME/2023-05-23: Unblock this eventually...
        if: false

  # ***

  smoke-test:
    name: Smoke test PyPI release

    runs-on: ubuntu-latest

    needs: poetry-publish

    # FIXME: Guessing we need this?
    # - FIXME: And probably need to let first job succeed if package
    # already published, so we can pick up at smoke-testing and then
    # send reversioning runs.
    #
    # if: ${{ needs.poetry-publish.conclusion == 'success' }}

    steps:
      - name: Print vars and environs
        run: |
          echo "VERSION_TAG: $VERSION_TAG"

      - name: Dump needs.poetry-publish
        run: echo "${JSON_DUMP}"
        shell: bash
        env:
          JSON_DUMP: ${{ toJson(needs.poetry-publish) }}

      # ***

      # github.repository is, e.g.,"pydob/easy-as-pypi".
      - name: Probe version
        run: echo "PACKAGE_NAME=$(basename ${{ github.repository }})" >> "$GITHUB_ENV"
        shell: bash

      # Wait for PyPI to get package ready.
      # - name: Sleep for 30 seconds
      #   run: sleep 30s
      #   shell: bash

      - name: Install package
        run: pipx install $PACKAGE_NAME

      - name: Run it!
        run: |
          echo $PACKAGE_NAME version
          $PACKAGE_NAME version
          echo "Expecting version: ${RELEASE_TAG#v}"
        shell: bash

      # FIXME/2023-05-25: Have prev. workflow leave tag RELEASE_TAG, and compare it.
      - name: Check version
        run: |
          [ "$($PACKAGE_NAME version)" = "${RELEASE_TAG#v}" ] \
            || exit 1
        shell: bash

      # ***

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install package
        run: pip install $PACKAGE_NAME

      - name: Infer module name
        run: echo "MODULE_NAME=${PACKAGE_NAME//-/_}" >> "$GITHUB_ENV"
        shell: bash

      - name: Load it!
        run: |
          python -c "import $MODULE_NAME; print($MODULE_NAME.__version__)"
        shell: bash

# ***
